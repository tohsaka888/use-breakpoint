{"version":3,"sources":["../../src/hook/useBreakPoint.tsx"],"names":["defaultBreakPoints","xs","sm","md","lg","xl","xxl","useBreakPoint","breakPoints","window","innerWidth","currentWidth","setCurrentWidth","size","setSize","deferedWidth","deferedSize","addEventListener","keys","Object","i","length"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;AAaA,IAAMA,kBAAoC,GAAG;AAC3CC,EAAAA,EAAE,EAAE,GADuC;AAE3CC,EAAAA,EAAE,EAAE,GAFuC;AAG3CC,EAAAA,EAAE,EAAE,GAHuC;AAI3CC,EAAAA,EAAE,EAAE,IAJuC;AAK3CC,EAAAA,EAAE,EAAE,IALuC;AAM3CC,EAAAA,GAAG,EAAE;AANsC,CAA7C;;AASA,SAASC,aAAT,GAA2E;AAAA,MAApDC,WAAoD,uEAApBR,kBAAoB;;AACzE,kBAAwC,qBAASS,MAAM,CAACC,UAAhB,CAAxC;AAAA;AAAA,MAAOC,YAAP;AAAA,MAAqBC,eAArB;;AACA,mBAAwB,qBAAiB,IAAjB,CAAxB;AAAA;AAAA,MAAOC,IAAP;AAAA,MAAaC,OAAb;;AACA,MAAMC,YAAY,GAAG,6BAAiBJ,YAAjB,CAArB;AACA,MAAMK,WAAW,GAAG,6BAAiBH,IAAjB,CAApB;AAEA,wBAAU,YAAM;AACdJ,IAAAA,MAAM,CAACQ,gBAAP,CAAwB,QAAxB,EAAkC,YAAM;AACtCL,MAAAA,eAAe,CAACH,MAAM,CAACC,UAAR,CAAf;AACD,KAFD;AAGD,GAJD,EAIG,EAJH;AAMA,wBAAU,YAAM;AACd,QAAIQ,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYV,WAAZ,CAAX;;AACA,SAAK,IAAIY,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,MAAM,CAACD,IAAP,CAAYV,WAAZ,EAAyBa,MAA7C,EAAqDD,CAAC,EAAtD,EAA0D;AACxD,UAAIZ,WAAW,CAACU,IAAI,CAACE,CAAD,CAAL,CAAX,IAAwBT,YAAY,GAAGH,WAAW,CAACU,IAAI,CAACE,CAAC,GAAG,CAAL,CAAL,CAAtD,EAAqE;AACnEN,QAAAA,OAAO,CAACI,IAAI,CAACE,CAAD,CAAL,CAAP;AACA;AACD;AACF;AACF,GARD,EAQG,CAACL,YAAD,CARH;AAUA,SAAO,CAACA,YAAD,EAAeC,WAAf,CAAP;AACD;;eAEcT,a","sourcesContent":["import React, { useDeferredValue, useEffect, useState } from \"react\";\n\ntype BreakPointConfig = {\n  xs?: number; // < 576px\n  sm?: number; // >=576px\n  md?: number; // >= 768px\n  lg?: number; // >= 960px\n  xl?: number; // >= 1200px\n  xxl?: number; // >=1400\n};\n\ntype BreakPoint = \"xs\" | \"sm\" | \"md\" | \"lg\" | \"xl\" | \"xxl\";\n\nconst defaultBreakPoints: BreakPointConfig = {\n  xs: 576,\n  sm: 768,\n  md: 960,\n  lg: 1200,\n  xl: 1400,\n  xxl: 1600,\n};\n\nfunction useBreakPoint(breakPoints: BreakPointConfig = defaultBreakPoints) {\n  const [currentWidth, setCurrentWidth] = useState(window.innerWidth);\n  const [size, setSize] = useState<string>(\"xl\");\n  const deferedWidth = useDeferredValue(currentWidth);\n  const deferedSize = useDeferredValue(size);\n\n  useEffect(() => {\n    window.addEventListener(\"resize\", () => {\n      setCurrentWidth(window.innerWidth);\n    });\n  }, []);\n\n  useEffect(() => {\n    let keys = Object.keys(breakPoints) as BreakPoint[];\n    for (let i = 0; i < Object.keys(breakPoints).length; i++) {\n      if (breakPoints[keys[i]] && currentWidth < breakPoints[keys[i + 1]]) {\n        setSize(keys[i]);\n        break;\n      }\n    }\n  }, [deferedWidth]);\n\n  return [deferedWidth, deferedSize];\n}\n\nexport default useBreakPoint;\n"],"file":"useBreakPoint.js"}